using System;
using System.Numerics;
using System.Security.Cryptography;

class Hometask2

{
    static double numerator(int n)
    {
        if (n == 1) return 1;
        else if (n == 2) return 2;
        else return numerator(n - 1) + numerator(n - 2);
    }
    static double denomerator(int n)
    {
        if ( (n == 1) || (n ==2) ) return 1;
        else return denomerator(n - 1) + denomerator(n - 2);
    }
    static int factorial(int n)
    {
        if (n == 1) return 1;
        return n * factorial(n - 1);
    }
    static void Main()
    {
       #region Level1_task4
       double res1 = 0.0;
       int x = Convert.ToInt32(Console.ReadLine());
       if (x != 0) {
            for (int i = 1; i != 10; i++)
            { res1 = (Math.Cos(i * x)) / Math.Pow(x, i - 1) + res1;}
         Console.WriteLine($"result1 sum(cos)-> {res1}");
       }
       else {Console.WriteLine("if you want to write '0' please think again ;p ");}
       #endregion
       #region Level1_task9
       double res2 = 0.0;
       for (int i = 1; i != 7; i++) { res2 = Math.Pow(-1, i) * Math.Pow(5, i) / factorial(i);}
       Console.WriteLine($"result2 (pow) -> {res2}");
        #endregion
       #region Level1_task15
        Console.WriteLine(numerator(5));
        Console.WriteLine(denomerator(5));
        double y1 = numerator(5);
        double y2 = denomerator(5);
        double res3 = y1 / y2;
        Console.WriteLine($"result3 - > {res3}");
        #endregion
       #region Level1_task16
        double p1 = 1.0;
        //double ix = 0;
        //int step = 0;
        for (int i = 1; i <= 64; i++)
        {
            p1 = Math.Pow(2, i) + p1;
        }

        Console.WriteLine($"count of corn -> {p1}");
        #endregion
       #region Level1_task18
        Console.Write("Введите время конца деления ->");
        double hours = Convert.ToDouble(Console.ReadLine());
        int volume = 10;
        double step2 = hours / 3;
        double res5 = Math.Pow(2, step2)*volume;
        Console.WriteLine($"ameba -> {res5}");
        #endregion
    }
}
